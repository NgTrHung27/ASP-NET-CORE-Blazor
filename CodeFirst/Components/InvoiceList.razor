@page "/invoice"

@using CodeFirst.Models.Entities;
@using CloudinaryDotNet
@using CloudinaryDotNet.Actions
@using CodeFirst.Data
@using CodeFirst.Hubs
@using CodeFirst.Models
@using CodeFirst.Service
@using DinkToPdf
@using DinkToPdf.Contracts
@using Microsoft.AspNetCore.Components.Web.Extensions
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Claims
@using BlazorBootstrap
@using System.Text
@using MudBlazor
@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.ChangeTracking
@using Microsoft.EntityFrameworkCore.Storage
@using System.Collections.Generic
@using System.Linq
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@inject CloudinaryService _cloudinaryService
@inject ISnackbar Snackbar
@inject IHubContext<MyBlazorHub> _hubContext
@inject CodeFirst.Service.NotificationService _notiService
@inject UserBlazorService _userBlazorService
@inject IConverter _pdfConverter
@inject IDialogService DialogService
@inject ApplicationDbContext _context
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AuthorizeService AuthorizeService
<button class="btn btn-primary mb-2" @onclick="OpenCreateInvoiceModal">Tạo hóa đơn</button>

<div class="modal fade @(showCreateInvoiceModal ? "show d-block" : "")" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" style="box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px, rgb(51, 51, 51) 0px 0px 0px 3px;">
            <div class="modal-header">
                <h5 class="modal-title">Tạo hóa đơn mới</h5>
               
            </div>
            <div class="modal-body">

                <form>
                    <div class="mb-3">
                        <label for="branch-select" class="form-label">Chi nhánh</label>
                        <select id="branch-select" class="form-select" @bind="newInvoice.BranchId">
                            @foreach (var branch in Branches)
                            {
                                <option value="@branch.BranchId">@branch.Name</option>
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="hall-select" class="form-label">Sảnh</label>
                        <select id="hall-select" class="form-select" @bind="newInvoice.HallId">
                            @foreach (var hall in Halls)
                            {
                                <option value="@hall.HallId">@hall.Name</option>
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="full-name" class="form-label">Họ và tên</label>
                        <input type="text" id="full-name" class="form-control" @bind="FullName" readonly />
                    </div>

                    <div class="mb-3">
                        <label for="phone-number" class="form-label">Số điện thoại</label>
                        <input type="text" id="phone-number" class="form-control" @bind="PhoneNumber" readonly />
                    </div>

                    <div class="mb-3">
                        <label for="email" class="form-label">Email khách hàng</label>
                        <input type="email" id="email" class="form-control" @bind="Email" readonly />
                    </div>

                    <div class="mb-3">
                        <label for="invoice-date" class="form-label">Ngày đặt</label>
                        <input type="date" id="invoice-date" class="form-control" @bind="newInvoice.InvoiceDate" readonly />
                    </div>

                    <div class="mb-3">
                        <label for="attendance-date" class="form-label">Ngày đến</label>
                        <input type="date" id="attendance-date" class="form-control" @bind="newInvoice.AttendanceDate" required />
                    </div>

                    <div class="mb-3">
                        <label for="note" class="form-label">Ghi chú</label>
                        <textarea id="note" class="form-control" @bind="newInvoice.Note" rows="3"></textarea>
                    </div>

                    <div class="mb-3">
                        <label for="order-status" class="form-label">Trạng thái đơn hàng</label>
                        <select id="order-status" class="form-select" @bind="newInvoice.OrderStatus" required>
                            <option value="Pending">Đang chờ</option>
                            <option value="Confirmed">Đã xác nhận</option>
                            <option value="Cancelled">Đã hủy</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label class="form-check-label">
                            <input type="checkbox" class="form-check-input" @bind="newInvoice.PaymentStatus" /> Đã thanh toán
                        </label>
                    </div>

                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>STT</th>
                                    <th>Thao tác</th>
                                    <th>Sản phẩm</th>
                                    <th>Giá</th>
                                    <th>Chi tiết</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var menu in Menus)
                                {
                                    <tr>
                                        <td>@menu.MenuId</td>
                                        <td><input type="checkbox" @bind="menu.IsSelected" /></td>
                                        <td>@menu.Name</td>
                                        <td>@menu.Price</td>
                                        <td>@menu.Description</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>STT</th>
                                    <th>Thao tác</th>
                                    <th>Sản phẩm</th>
                                    <th>Giá</th>
                                    <th>Chi tiết</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var service in Services)
                                {
                                    <tr>
                                        <td>@service.ServiceId</td>
                                        <td><input type="checkbox" @bind="service.IsSelected" /></td>
                                        <td>@service.Name</td>
                                        <td>@service.Price</td>
                                        <td>@service.Description</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    @if (showDuplicateAlert)
                    {
                        <div class="alert alert-danger text-center" role="alert">
                            Ngày đặt sảnh này đã tồn tại!
                            <button type="button" class="btn-close" @onclick="() => showDuplicateAlert = false" aria-label="Close"></button>
                        </div>
                    }
                    <button type="button" @onclick="CloseCreateInvoiceModal" class="btn btn-close">Hủy</button>
                    <button type="button" @onclick="CreateInvoice" class="btn btn-primary">Tạo hóa đơn</button>
                </form>
                @if (showAlertCreateInvoice)
                {
                    <div class="alert alert-success text-center" role="alert">
                        Tạo hóa đơn thành công!
                        <button type="button" class="btn-close" @onclick="CloseCreateInvoiceModal" aria-label="Close"></button>
                    </div>
                }
                @if (showAlert)
                {
                    <div class="alert alert-danger text-center" role="alert">
                        Vui lòng nhập đầy đủ thông tin!
                        <button type="button" class="btn-close" @onclick="() => showAlert = false" aria-label="Close"></button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string FullName = "";
    private string Email = "";
    private string PhoneNumber = "";
    private string Role ="";
    private string UserId ="";
    private bool success;
    private bool showCreateInvoiceModal = false;
    private bool showAlertCreateInvoice = false;
    private bool showAlert = false;
    private string[] errors = new string[] { };
    private bool showDuplicateAlert = false;

    private Invoice newInvoice = new Invoice();
    private List<Branch> Branches { get; set; } = new List<Branch>();
    private List<Hall> Halls { get; set; } = new List<Hall>();
    private List<MenuEntity> Menus { get; set; } = new List<MenuEntity>();
    private List<ServiceEntity> Services { get; set; } = new List<ServiceEntity>();

    protected override async Task OnInitializedAsync()
    {
        Branches = await _context.Branch.ToListAsync();
        Halls = await _context.Hall.ToListAsync();
        Menus = await _context.MenuEntity.Include(m => m.MenuCategory).ToListAsync();
        Services = await _context.ServiceEntity.Include(s => s.ServiceCategory).ToListAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var currentUser = await UserManager.GetUserAsync(user);

        FullName = currentUser.UserName;
        Email = currentUser.Email;
        PhoneNumber = currentUser.PhoneNumber;

        Role = await AuthorizeService.GetRoleId(currentUser);
        await LoadInvoices();
    }

    private void OpenCreateInvoiceModal()
    {
        showCreateInvoiceModal = true;
        newInvoice = new Invoice
            {
                FullName = FullName,
                PhoneNumber = PhoneNumber,
                InvoiceDate = DateTime.Now,
                BranchId = 1,
                HallId = 1
            };
    }

    private void CloseCreateInvoiceModal()
    {
        showCreateInvoiceModal = false;
        showAlertCreateInvoice = false;
        showAlert = false;
        showDuplicateAlert = false;
    }

    private async Task CreateInvoice()
    {
        if (newInvoice.BranchId == 0 || newInvoice.HallId == 0 || newInvoice.AttendanceDate == default)
        {
            showAlert = true;
            return;
        }

        // Check for duplicate AttendanceDate for the selected Hall
        var existingInvoice = await _context.Invoice
            .FirstOrDefaultAsync(i => i.HallId == newInvoice.HallId && i.AttendanceDate == newInvoice.AttendanceDate);

        if (existingInvoice != null)
        {
            showDuplicateAlert = true;
            return;
        }

        try
        {
        newInvoice.UserId = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        _context.Invoice.Add(newInvoice);

        await _context.SaveChangesAsync();
        newInvoice.OrderMenus = new List<OrderMenu>();
        newInvoice.OrderServices = new List<OrderService>();
            foreach (var service in Services.Where(s => s.IsSelected))
            {
                var orderService = new OrderService
                    {
                        InvoiceID = newInvoice.InvoiceID,
                        ServiceId = service.ServiceId
                    };
                newInvoice.OrderServices.Add(orderService);
            }
            foreach (var menu in Menus.Where(m => m.IsSelected))
            {
                var orderMenu = new OrderMenu
                    {
                        InvoiceID = newInvoice.InvoiceID,
                        MenuId = menu.MenuId
                    };
               newInvoice.OrderMenus.Add(orderMenu);
             }
         _context.Update(newInvoice);
    await _context.SaveChangesAsync();     
        showAlertCreateInvoice = true;
        showCreateInvoiceModal = false;
        await LoadInvoices();
        } 
        catch (DbUpdateException dbEx)
        {
        var innerException = dbEx.InnerException?.Message ?? dbEx.Message;
        Console.WriteLine($"An error occurred while saving the entity changes: {innerException}");
        // Ghi log chi tiết hoặc xử lý lỗi tùy theo yêu cầu của bạn
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Lỗi khi lưu hóa đơn {ex.Message}");
        }
    }

    private async Task LoadInvoices()
    {
        listInvoice = await _context.Invoice
            .Include(i => i.Branch)
            .Include(i => i.Hall)
            .Include(i => i.User)
            .ToListAsync();
    }
    private void CalculateTotal()
    {
        double total = 0;

        foreach (var menuId in Menus.Where(m => m.IsSelected).Select(m => m.MenuId))
        {
            var menuItem = Menus.FirstOrDefault(m => m.MenuId == menuId);
            if (menuItem != null)
            {
                total += menuItem.Price ?? 0;
            }
        }

        foreach (var serviceId in Services.Where(s => s.IsSelected).Select(s => s.ServiceId))
        {
            var serviceItem = Services.FirstOrDefault(s => s.ServiceId == serviceId);
            if (serviceItem != null)
            {
                total += serviceItem.Price ?? 0;
            }
        }

        newInvoice.Total = total;
    }
}


<div class="table-responsive">
    <table class="table">
        <thead>
            <tr>
                <th>STT</th>
                <th>Chi nhánh</th>
                <th>Sảnh</th>
                <th>Email</th>
                <th>Ngày đặt</th>
                <th>Ngày đến</th>
                <th>Trạng thái</th>
                <th>Thanh toán</th>
                <th>Ca</th>
                <th>Hành động</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var invoice in listInvoice)
            {
                <tr>
                    <td>@invoice.InvoiceID</td>
                    <td>@invoice.Branch?.Name</td>
                    <td>@invoice.Hall?.Name</td>
                    <td>@invoice.User?.Email</td>
                    <td>@invoice.InvoiceDate?.ToString("dd/MM/yyyy")</td>
                    <td>@invoice.AttendanceDate?.ToString("dd/MM/yyyy")</td>
                    <td>@invoice.OrderStatus</td>
                    <td>@(invoice.PaymentStatus ? "Đã thanh toán" : "Chưa thanh toán")</td>
                    <td>@invoice.TimeHall</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => OpenInvoiceDetails(invoice.InvoiceID)">Chi tiết</button>
                        <button class="btn btn-danger" @onclick="() => OpenDeleteConfirmation(invoice.InvoiceID)">Xóa</button>
                    </td>
                </tr>

            }
        </tbody>
    </table>
</div>

@code{
    private bool showDeleteConfirmation = false;
    private int invoiceToDeleteId;
    // bật chi tiết ở table
    private void OpenDeleteConfirmation(int invoiceId)
    {
        invoiceToDeleteId = invoiceId;
        showDeleteConfirmation = true;
    }
    private void CloseDeleteConfirmation()
    {
        showDeleteConfirmation = false;
    }
    private async Task DeleteInvoiceConfirmed()
    {
        var result = await mbox.Show(); // Hiển thị MessageBox (nếu cần)
        if (result == true)
        {
            // Thực hiện xóa hóa đơn và các liên kết
            var invoiceToDelete = await _context.Invoice
                                               .Include(i => i.OrderMenus)
                                               .Include(i => i.OrderServices)
                                               .FirstOrDefaultAsync(i => i.InvoiceID == invoiceToDeleteId);

            if (invoiceToDelete != null)
            {
                _context.Invoice.Remove(invoiceToDelete);

                // Xóa các order menu và order service của hóa đơn
                foreach (var orderMenu in invoiceToDelete.OrderMenus)
                {
                    _context.OrderMenu.Remove(orderMenu);
                }

                foreach (var orderService in invoiceToDelete.OrderServices)
                {
                    _context.OrderService.Remove(orderService);
                }

                await _context.SaveChangesAsync();

                await LoadInvoices(); // Cập nhật lại danh sách hóa đơn
            }

            CloseDeleteConfirmation(); // Đóng modal xác nhận xóa sau khi xóa thành công
        }
    }

    private MudMessageBox mbox;
    private string searchString1 = string.Empty;
    private List<Invoice> listInvoice = new List<Invoice>();
    private int change;
    private void OpenInvoiceDetails(int invoiceId)
    {
        NavigationManager.NavigateTo($"/invoice/details/{invoiceId}");
    }

    // filter của table
    private bool FilterFunc1(Invoice element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Invoice element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.InvoiceID.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.User?.Email?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            return true;
        if (element.InvoiceDate?.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            return true;
        return false;
    }
    private async Task DeleteInvoice(int invoiceId)
    {
        var result = await mbox.Show();
        if (result == true)
        {
            // Thực hiện xóa hóa đơn
            var invoiceToDelete = await _context.Invoice.FindAsync(invoiceId);
            if (invoiceToDelete != null)
            {
                _context.Invoice.Remove(invoiceToDelete);
                await _context.SaveChangesAsync();
                listInvoice = await _context.Invoice.ToListAsync(); // Cập nhật lại danh sách
                change++; // Kích hoạt render lại bảng
                StateHasChanged();
            }
        }
        await LoadInvoices();
    }
    
}
